@using Microsoft.AspNetCore.Http
@using WSEP212.DomainLayer
@using WSEP212.DomainLayer.SystemLoggers
@using WSEP212.ServiceLayer
@inject IHttpContextAccessor HttpContextAccessor
<!DOCTYPE html>

<html>
<head>
    <title>title</title>
</head>
<body>
@model WebApplication.Models.AppointModel
<div class="appointofficialsdiv">
    @try
    {
        @using (Html.BeginForm("ItemActions", "Home", FormMethod.Post))
        {
            <label for="storesList">Users</label>
            string[] AllUsers = HttpContextAccessor.HttpContext.Session.GetObject<string[]>("allUsers");
            @Html.DropDownListFor(model => model.userName, new SelectList(AllUsers.OfType<string>().ToList()), new {@class = "custom-select"})
            ;
            string name = HttpContextAccessor.HttpContext.Session.GetString("_Name");
            int store = (int) HttpContextAccessor.HttpContext.Session.GetInt32("_StoreID");
            @if (SystemController.Instance.hasPermission(name, store, Permissions.AppointStoreManager).getTag())
            {
                <button style="margin-top: 20px" class="btn btn-outline-primary" formaction="TryAppointManager" type="submit">Appoint Manager</button>
            }
            @if (SystemController.Instance.hasPermission(name, store, Permissions.AppointStoreOwner).getTag())
            {
                <button style="margin-top: 20px" class="btn btn-outline-primary" formaction="TryAppointOwner" type="submit">Appoint Owner</button>
            }
        }
    }
    catch (Exception e)
    {
         var msg = e.Message + " ";
         var inner = e.InnerException;
         if (inner != null)
             msg += inner.Message;
         Logger.Instance.writeErrorEventToLog(msg);
    }
    
</div>
</body>
</html>

@if (TempData["alert"] != null)
{
    <script type="text/javascript">  
            window.onload = function() {  
                alert("@TempData["alert"]");  
            };  
        </script>  
} 

@section Scripts {
    <script src="~/js/signalr.js"></script>

    <script>
        let connection = new signalR.HubConnectionBuilder().withUrl("/notifications").build();
     
        connection.on('sendToUser', data => {
             alert(data)
        });
     
        connection.start().then(() => {
            console.log("connection started");
            connection.invoke('GetConnectionId').then(function (connectionId) {
                //alert(connectionId);
            });
        });
      </script>
}