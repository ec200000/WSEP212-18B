@using Microsoft.AspNetCore.Http
@using System.Collections.Concurrent;
@using System;
@using WSEP212.DomainLayer.SystemLoggers
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Daily Visitors";
}
<!DOCTYPE html>

<html>
<body>
    @model WebApplication.Models.PurchaseModel
<div class="dailyvisitors">
    @try
    {
        <div style="width: 50%;">
            <canvas id="myChart"></canvas>
        </div>
    }
    catch (Exception e)
    {
         var msg = e.Message + " ";
         var inner = e.InnerException;
         if (inner != null)
         {
             msg += inner.Message;
         }
         Logger.Instance.writeErrorEventToLog(msg);
    }
    
</div>
</body>
</html>

@if (TempData["alert"] != null)
{
    <script type="text/javascript">  
            window.onload = function() {  
                alert("@TempData["alert"]");  
            };  
        </script>  
}

@section Scripts {
    <script src="~/js/signalr.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder().withUrl("/notifications").build();
        let chartConnection = new signalR.HubConnectionBuilder().withUrl("/charts").build();
     
        connection.on('sendToUser', data => {
             alert(data)
        });
        
        connection.start().then(() => {
            console.log("connection started");
            connection.invoke('GetConnectionId').then(function (connectionId) {
                //alert(connectionId);
            });
        });
        
        chartConnection.start().then(() => {
            console.log("chart connection started");
            chartConnection.invoke('InitChartData');
        });
        
        const data = {
              labels: [
                'Guests',
                'Regular Users',
                'Store Managers',
                'Store Owners',
                'System Managers'
              ],
              datasets: [{
                label: 'My First Dataset',
                data: {},
                backgroundColor: [
                  'rgb(255, 99, 132)',
                  'rgb(54, 162, 235)',
                  'rgb(255, 205, 86)',
                  'rgb(0, 255, 0)',
                  'rgb(255, 153, 204)'
                ],
                hoverOffset: 4
              }]
            };
            const config = {
              type: 'pie',
              data,
              options: {}
            };
            var myChart = new Chart(
                document.getElementById('myChart'),
                config
        );
        
        function arrays_equal(a,b) { return !!a && !!b && !(a<b || b<a); }
            
        chartConnection.on('updateChart', val => {
            if (!arrays_equal(val,data.datasets[0].data)){
                myChart.destroy();
                data.datasets[0].data = val;
                myChart = new Chart(
                  document.getElementById('myChart'),
                  config
                );
            }     
        });
        
      </script>

}