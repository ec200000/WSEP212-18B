@using Microsoft.AspNetCore.Http
@using WSEP212.DomainLayer
@using WSEP212.DomainLayer.SalePolicy
@using WSEP212.DomainLayer.SystemLoggers
@using WSEP212.ServiceLayer
@inject IHttpContextAccessor HttpContextAccessor
@model WebApplication.Models.BidsModel
<!DOCTYPE html>

<html>
<head>
    <title>title</title>
</head>
<body>
<div class="editsalepredicatesdiv">
    @try
    {
        @using (Html.BeginForm("ItemActions", "Home", FormMethod.Post))
        {
            string name = HttpContextAccessor.HttpContext.Session.GetString("_Name");
            int store = (int) HttpContextAccessor.HttpContext.Session.GetInt32("_StoreID");
            @if (SystemController.Instance.hasPermission(name, store, Permissions.AllPermissions).getTag())
            {
                <label for="storesList">Shopping Bids</label>
                string[] bidsList = HttpContextAccessor.HttpContext.Session.GetObject<string[]>("bids");
                @Html.DropDownListFor(model => model.bid, new SelectList(bidsList.OfType<string>().ToList()), new {@class = "custom-select"})
                ;

                <button class="btn btn-outline-primary" formaction="DiclineBid" type="submit">Dicline Bid</button>

                <button class="btn btn-outline-primary" type="submit" formaction="ApproveBid">Approve Bid</button>

                @Html.TextBoxFor(model => model.newBid, new {placeholder = "Counter offer", @class = "inputclassopenstore"})

                <button class="btn btn-outline-primary" type="submit" formaction="CounterOffer">Counter Offer</button>
            }
        }   
    }
    catch (Exception e)
    {
         var msg = e.Message + " ";
         var inner = e.InnerException;
         if (inner != null)
         {
             msg += inner.Message;
         }
         Logger.Instance.writeErrorEventToLog(msg);
    }
    
</div>
</body>
</html>
@if (TempData["alert"] != null)  
      {  
          <script type="text/javascript">  
                  window.onload = function() {  
                      alert("@TempData["alert"]");  
                  };  
          </script>  
      } 

@section Scripts {
    <script src="~/js/signalr.js"></script>

    <script>
        let connection = new signalR.HubConnectionBuilder().withUrl("/notifications").build();
     
        connection.on('sendToUser', data => {
             alert(data)
        });
       
        connection.start().then(() => {
            console.log("connection started");
            connection.invoke('GetConnectionId').then(function (connectionId) {
                //alert(connectionId);
            });
        });
      </script>
}