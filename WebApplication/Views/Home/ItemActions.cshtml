@using Microsoft.AspNetCore.Http
@using WSEP212.DomainLayer
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using WSEP212.DomainLayer.SystemLoggers
@inject IHttpContextAccessor HttpContextAccessor
<!DOCTYPE html>

<html>
<head>
    <title>title</title>
</head>
<body>
<div class="itemactionsadddiv">
    @model WebApplication.Models.ItemModel
    @try
    {
        @using (Html.BeginForm("TryAddItem", "Home", FormMethod.Post))
        {
        
            @Html.EditorFor(model => model.quantity,new { htmlAttributes = new  {@class="inputclassitemactions" , @placeholder = "Quantity"}})
            @Html.ValidationMessageFor(model => model.quantity)
        
        
        
            @Html.TextBoxFor(model => model.itemName,new { placeholder = "Item name",@class="inputclassitemactions" })
            @Html.ValidationMessageFor(model => model.itemName)
        
        
        
            @Html.TextBoxFor(model => model.description,new { placeholder = "Description",@class="inputclassitemactions" })
            @Html.ValidationMessageFor(model => model.description)
        
        
      
            @Html.EditorFor(model => model.price,new { htmlAttributes = new  {@class="inputclassitemactions" , @placeholder = "Price"}})
            @Html.ValidationMessageFor(model => model.price)
            
              
            ItemCategory[] arr = new[]
            {
                ItemCategory.AllCategories, ItemCategory.Dairy, ItemCategory.Meat, ItemCategory.Clothing,
                ItemCategory.Footwear, ItemCategory.Cleaners, ItemCategory.Vegetables, ItemCategory.Electronics, ItemCategory.Health,
                ItemCategory.Sport, ItemCategory.Dinnerware, ItemCategory.Fruits, ItemCategory.Snacks, ItemCategory.Pastries,
                ItemCategory.Drinks, ItemCategory.Tools, ItemCategory.Other
            };
            string[] itemCategory = Array.ConvertAll(arr, value => value.ToString());
            @Html.DropDownListFor(model => model.category, new SelectList(itemCategory.OfType<string>().ToList()), new {@class = "custom-select"})
            ;
            @Html.ValidationMessageFor(model => model.category)
           
       
        
            <button class="btn btn-outline-primary" type="submit" type="submit">Add Item To Store</button>
        }
    }
    catch (Exception e)
    {
        var msg = e.Message + " ";
        var inner = e.InnerException;
        if (inner != null)
        {
            msg += inner.Message;
        }
        Logger.Instance.writeErrorEventToLog(msg);
    }
    
</div>
<div class="itemactionsremovediv">
    @try
    {
        @using (Html.BeginForm("TryRemoveItem", "Home", FormMethod.Post))
        {
            <label for="storesList">Items List</label>
            string str = "items" + HttpContextAccessor.HttpContext.Session.GetInt32("_StoreID");
            int[] ItemsList = HttpContextAccessor.HttpContext.Session.GetObject<int[]>(str);
            @Html.DropDownListFor(model => model.itemID, new SelectList(ItemsList.OfType<int>().ToList()), new {@class = "custom-select"})
            ;

            <button style="margin-top: 20px" class="btn btn-outline-primary" type="submit" type="submit">Remove Item From Store</button>
        } 
    }
    catch (Exception e)
    {
        var msg = e.Message + " ";
        var inner = e.InnerException;
        if (inner != null)
        {
            msg += inner.Message;
        }
        Logger.Instance.writeErrorEventToLog(msg);
    }
    
</div>
<div class="itemactionseditdiv">
    @try
    {
        @using (Html.BeginForm("EditItemDetails", "Home", FormMethod.Post))
        {
            <label for="storesList">Items List</label>
            string str = "items" + HttpContextAccessor.HttpContext.Session.GetInt32("_StoreID");
            int[] ItemsList = HttpContextAccessor.HttpContext.Session.GetObject<int[]>(str);
            @Html.DropDownListFor(model => model.itemID, new SelectList(ItemsList.OfType<int>().ToList()), new {@class = "custom-select"})
            ;


            <button style="margin-top: 20px" class="btn btn-outline-primary" type="submit" type="submit">Edit Item's Details</button>
        } 
    }
    catch (Exception e)
    {
        var msg = e.Message + " ";
        var inner = e.InnerException;
        if (inner != null)
        {
            msg += inner.Message;
        }
        Logger.Instance.writeErrorEventToLog(msg);
    }

</div>
</body>
</html>
@if (TempData["alert"] != null)
{
    <script type="text/javascript">  
            window.onload = function() {  
                alert("@TempData["alert"]");  
            };  
        </script>  
}

@section Scripts {
    <script src="~/js/signalr.js"></script>

    <script>
        let connection = new signalR.HubConnectionBuilder().withUrl("/notifications").build();
     
        connection.on('sendToUser', data => {
             alert(data)
        });
        
        connection.start().then(() => {
            console.log("connection started");
            connection.invoke('GetConnectionId').then(function (connectionId) {
                //alert(connectionId);
            });
        });
      </script>
}