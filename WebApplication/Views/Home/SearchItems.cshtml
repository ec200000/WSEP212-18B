@using Microsoft.AspNetCore.Http
@using WSEP212.ConcurrentLinkedList
@using WSEP212.DomainLayer
@using System.Collections.Concurrent
@using WSEP212.DomainLayer.ConcurrentLinkedList
@inject IHttpContextAccessor HttpContextAccessor
<!DOCTYPE html>

<html>
<head>
    <title>title</title>
</head>
<body>
<div class="searchitemsdivaddview">
    @model WebApplication.Models.SearchModel
    @using (Html.BeginForm("TryAddItemToShoppingCart", "Home", FormMethod.Post))
    {
        <label for="storesList">Items List</label>
        ConcurrentDictionary<Store,ConcurrentLinkedList<Item>> ItemsList = HttpContextAccessor.HttpContext.Session.GetObject<ConcurrentDictionary<Store,ConcurrentLinkedList<Item>>>("allitems!");
        @Html.DropDownListFor(model => model.itemChosen, new SelectList(Model.items.OfType<string>().ToList()), new {@class = "custom-select"})
        @Html.TextBoxFor(model => model.quantity,new { placeholder = "Quantity",@class="inputclassindex" })
        string[] types = HttpContextAccessor.HttpContext.Session.GetObject<string[]>("purchasetypes");
        @Html.DropDownListFor(model => model.purchaseType, new SelectList(types.OfType<string>().ToList()), new {@class = "custom-select"});
        @Html.TextBoxFor(model => model.priceOffer,new { placeholder = "Price Offer",@class="inputclassindex" })

        <button class="btn btn-outline-primary" type="submit">Add Item To Shopping Cart</button>
        <button class="btn btn-outline-primary" type="submit" formaction="TryShowReviews">View Item's reviews</button>
    }
</div>
<div class="searchitemsdivsearch">
    @using (Html.BeginForm("TrySearchItems", "Home", FormMethod.Post))
    {
        @Html.TextBoxFor(model => model.minPrice,new { placeholder = "Minimum price",@class="inputclassindex" })
        
        @Html.TextBoxFor(model => model.maxPrice,new { placeholder = "Maximum price",@class="inputclassindex" })
        @Html.TextBoxFor(model => model.keyWords,new { placeholder = "Key words",@class="inputclassindex" })
        

        <label for="storesList">Category List</label>
                 ItemCategory[] arr = new[]
                 {
                     ItemCategory.AllCategories, ItemCategory.Dairy, ItemCategory.Meat, ItemCategory.Clothing,
                     ItemCategory.Footwear, ItemCategory.Cleaners, ItemCategory.Vegetables, ItemCategory.Electronics, ItemCategory.Health,
                     ItemCategory.Sport, ItemCategory.Dinnerware, ItemCategory.Fruits, ItemCategory.Snacks,ItemCategory.Pastries,
                     ItemCategory.Drinks, ItemCategory.Tools, ItemCategory.Other
                 };
                 string[] itemCategory = Array.ConvertAll(arr, value => value.ToString());
                 @Html.DropDownListFor(model => model.category, new SelectList(itemCategory.OfType<string>().ToList()), new {@class = "custom-select"})
                 ;
             
        
        <div>
            @Html.TextBoxFor(model => model.itemName,new { placeholder = "Item name",@class="inputclassindex" })
        </div>
        
        <button class="btn btn-outline-primary" type="submit">Search Items</button>
    }
</div>
</body>
</html>
@if (TempData["alert"] != null)  
{  
    <script type="text/javascript">  
                  window.onload = function() {  
                      alert("@TempData["alert"]");  
                  };  
          </script>  
} 

@section Scripts {
    <script src="~/js/signalr.js"></script>

    <script>
        let connection = new signalR.HubConnectionBuilder().withUrl("/notifications").build();
     
        connection.on('sendToUser', data => {
             alert(data)
        });
        
        connection.start().then(() => {
            console.log("connection started");
            connection.invoke('GetConnectionId').then(function (connectionId) {
                //alert(connectionId);
            });
        });
      </script>
}